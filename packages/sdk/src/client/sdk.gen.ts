// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  SignupData,
  SignupResponse,
  SignupError,
  SigninData,
  SigninResponse,
  SigninError,
  RefreshTokenData,
  RefreshTokenResponse,
  SignoutData,
  SignoutResponse,
  GetCurrentUserData,
  GetCurrentUserResponse,
  RootData,
  RootResponse,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

export class AuthService {
  /**
   * Signup
   */
  public static signup<ThrowOnError extends boolean = false>(
    options: Options<SignupData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      SignupResponse,
      SignupError,
      ThrowOnError
    >({
      url: "/auth/signup",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  /**
   * Signin
   */
  public static signin<ThrowOnError extends boolean = false>(
    options: Options<SigninData, ThrowOnError>,
  ) {
    return (options.client ?? _heyApiClient).post<
      SigninResponse,
      SigninError,
      ThrowOnError
    >({
      url: "/auth/signin",
      ...options,
      headers: {
        "Content-Type": "application/json",
        ...options?.headers,
      },
    });
  }

  /**
   * Refresh Token
   */
  public static refreshToken<ThrowOnError extends boolean = false>(
    options?: Options<RefreshTokenData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      RefreshTokenResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/auth/refresh-token",
      ...options,
    });
  }

  /**
   * Signout
   */
  public static signout<ThrowOnError extends boolean = false>(
    options?: Options<SignoutData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).post<
      SignoutResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/auth/signout",
      ...options,
    });
  }

  /**
   * Get Current User
   */
  public static getCurrentUser<ThrowOnError extends boolean = false>(
    options?: Options<GetCurrentUserData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      GetCurrentUserResponse,
      unknown,
      ThrowOnError
    >({
      security: [
        {
          scheme: "bearer",
          type: "http",
        },
      ],
      url: "/auth/me",
      ...options,
    });
  }
}

export class DefaultService {
  /**
   * Root
   */
  public static root<ThrowOnError extends boolean = false>(
    options?: Options<RootData, ThrowOnError>,
  ) {
    return (options?.client ?? _heyApiClient).get<
      RootResponse,
      unknown,
      ThrowOnError
    >({
      url: "/",
      ...options,
    });
  }
}
