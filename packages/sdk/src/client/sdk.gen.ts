// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  AuthSignupData,
  AuthSignupResponse,
  AuthSignupError,
  AuthSigninData,
  AuthSigninResponse,
  AuthSigninError,
  AuthRefreshTokenData,
  AuthRefreshTokenResponse,
  AuthSignoutData,
  AuthSignoutResponse,
  AuthGetCurrentUserData,
  AuthGetCurrentUserResponse,
  TgAccountsListData,
  TgAccountsListResponse,
  TgAccountsCreateData,
  TgAccountsCreateResponse,
  TgAccountsCreateError,
  TgAccountsSendCodeData,
  TgAccountsSendCodeResponse,
  TgAccountsSendCodeError,
  TgAccountsSigninData,
  TgAccountsSigninResponse,
  TgAccountsSigninError,
  TgAccountsGetData,
  TgAccountsGetResponse,
  TgAccountsGetError,
  TgAgentsListData,
  TgAgentsListResponse,
  TgAgentsListError,
  TgAgentsCreateData,
  TgAgentsCreateResponse,
  TgAgentsCreateError,
  TgAgentsListBotsData,
  TgAgentsListBotsResponse,
  TgAgentsListBotsError,
  TgAgentsDeleteData,
  TgAgentsDeleteError,
  TgAgentsGetData,
  TgAgentsGetResponse,
  TgAgentsGetError,
  TgAgentsCheckBotPermissionsData,
  TgAgentsCheckBotPermissionsResponse,
  TgAgentsCheckBotPermissionsError,
  TgAgentsCreateBotData,
  TgAgentsCreateBotResponse,
  TgAgentsCreateBotError,
  TgAgentsLinkBotData,
  TgAgentsLinkBotResponse,
  TgAgentsLinkBotError,
  TgAgentsUpdateChannelProfileData,
  TgAgentsUpdateChannelProfileResponse,
  TgAgentsUpdateChannelProfileError,
  TgAgentsGeneratePostData,
  TgAgentsGeneratePostResponse,
  TgAgentsGeneratePostError,
  TgCreditsListPackagesData,
  TgCreditsListPackagesResponse,
  TgCreditsListPackagesError,
  TgCreditsSendInvoiceData,
  TgCreditsSendInvoiceError,
  TgbotAuthMeData,
  TgbotAuthMeResponse,
  PostWebhookData,
  PostWebhookError,
  RootData,
  RootResponse,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Signup
 */
export const authSignup = <ThrowOnError extends boolean = false>(
  options: Options<AuthSignupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthSignupResponse,
    AuthSignupError,
    ThrowOnError
  >({
    url: "/auth/signup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Signin
 */
export const authSignin = <ThrowOnError extends boolean = false>(
  options: Options<AuthSigninData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthSigninResponse,
    AuthSigninError,
    ThrowOnError
  >({
    url: "/auth/signin",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Refresh Token
 */
export const authRefreshToken = <ThrowOnError extends boolean = false>(
  options?: Options<AuthRefreshTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthRefreshTokenResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/refresh-token",
    ...options,
  });
};

/**
 * Signout
 */
export const authSignout = <ThrowOnError extends boolean = false>(
  options?: Options<AuthSignoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthSignoutResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/signout",
    ...options,
  });
};

/**
 * Get Current User
 */
export const authGetCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<AuthGetCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthGetCurrentUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/me",
    ...options,
  });
};

/**
 * List Accounts
 */
export const tgAccountsList = <ThrowOnError extends boolean = false>(
  options?: Options<TgAccountsListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    TgAccountsListResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/tg/accounts/",
    ...options,
  });
};

/**
 * Create
 */
export const tgAccountsCreate = <ThrowOnError extends boolean = false>(
  options: Options<TgAccountsCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TgAccountsCreateResponse,
    TgAccountsCreateError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/tg/accounts/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Send Code
 */
export const tgAccountsSendCode = <ThrowOnError extends boolean = false>(
  options: Options<TgAccountsSendCodeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TgAccountsSendCodeResponse,
    TgAccountsSendCodeError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/tg/accounts/send-code",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Signin
 */
export const tgAccountsSignin = <ThrowOnError extends boolean = false>(
  options: Options<TgAccountsSigninData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TgAccountsSigninResponse,
    TgAccountsSigninError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/tg/accounts/signin",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Get
 */
export const tgAccountsGet = <ThrowOnError extends boolean = false>(
  options: Options<TgAccountsGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    TgAccountsGetResponse,
    TgAccountsGetError,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/tg/accounts/{account_id}",
    ...options,
  });
};

/**
 * List Agents
 */
export const tgAgentsList = <ThrowOnError extends boolean = false>(
  options?: Options<TgAgentsListData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    TgAgentsListResponse,
    TgAgentsListError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tg/agents/",
    ...options,
  });
};

/**
 * Create
 */
export const tgAgentsCreate = <ThrowOnError extends boolean = false>(
  options: Options<TgAgentsCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    TgAgentsCreateResponse,
    TgAgentsCreateError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tg/agents/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * List Bots
 */
export const tgAgentsListBots = <ThrowOnError extends boolean = false>(
  options?: Options<TgAgentsListBotsData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    TgAgentsListBotsResponse,
    TgAgentsListBotsError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tg/agents/bots",
    ...options,
  });
};

/**
 * Delete
 */
export const tgAgentsDelete = <ThrowOnError extends boolean = false>(
  options: Options<TgAgentsDeleteData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).delete<
    unknown,
    TgAgentsDeleteError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tg/agents/{agent_id}",
    ...options,
  });
};

/**
 * Get
 */
export const tgAgentsGet = <ThrowOnError extends boolean = false>(
  options: Options<TgAgentsGetData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).get<
    TgAgentsGetResponse,
    TgAgentsGetError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tg/agents/{agent_id}",
    ...options,
  });
};

/**
 * Check Bot Permissions
 * Long running endpoints that connects to the telegram and checks if the bot has sufficient permissions
 */
export const tgAgentsCheckBotPermissions = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TgAgentsCheckBotPermissionsData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TgAgentsCheckBotPermissionsResponse,
    TgAgentsCheckBotPermissionsError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tg/agents/{agent_id}/check-bot-permissions",
    ...options,
  });
};

/**
 * Createbot
 */
export const tgAgentsCreateBot = <ThrowOnError extends boolean = false>(
  options: Options<TgAgentsCreateBotData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    TgAgentsCreateBotResponse,
    TgAgentsCreateBotError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tg/agents/{agent_id}/bots",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Link Bot
 */
export const tgAgentsLinkBot = <ThrowOnError extends boolean = false>(
  options: Options<TgAgentsLinkBotData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TgAgentsLinkBotResponse,
    TgAgentsLinkBotError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tg/agents/{agent_id}/bots/link",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Update Channel Profile
 */
export const tgAgentsUpdateChannelProfile = <
  ThrowOnError extends boolean = false,
>(
  options: Options<TgAgentsUpdateChannelProfileData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TgAgentsUpdateChannelProfileResponse,
    TgAgentsUpdateChannelProfileError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tg/agents/{agent_id}/channel-profile",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Generate Post
 */
export const tgAgentsGeneratePost = <ThrowOnError extends boolean = false>(
  options: Options<TgAgentsGeneratePostData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TgAgentsGeneratePostResponse,
    TgAgentsGeneratePostError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tg/agents/{agent_id}/generate-post",
    ...options,
  });
};

/**
 * List Packages
 * Get list of available packages
 */
export const tgCreditsListPackages = <ThrowOnError extends boolean = false>(
  options?: Options<TgCreditsListPackagesData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    TgCreditsListPackagesResponse,
    TgCreditsListPackagesError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tg/credits/packages",
    ...options,
  });
};

/**
 * Send Invoice
 * Send payment invoice for user
 */
export const tgCreditsSendInvoice = <ThrowOnError extends boolean = false>(
  options: Options<TgCreditsSendInvoiceData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).put<
    unknown,
    TgCreditsSendInvoiceError,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tg/credits/send_invoice",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Me
 */
export const tgbotAuthMe = <ThrowOnError extends boolean = false>(
  options?: Options<TgbotAuthMeData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    TgbotAuthMeResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        name: "x-telegram-auth",
        type: "apiKey",
      },
    ],
    url: "/tgbot/auth/",
    ...options,
  });
};

/**
 * Post Webhook
 */
export const postWebhook = <ThrowOnError extends boolean = false>(
  options?: Options<PostWebhookData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    unknown,
    PostWebhookError,
    ThrowOnError
  >({
    url: "/tgbot/webhook",
    ...options,
  });
};

/**
 * Root
 */
export const root = <ThrowOnError extends boolean = false>(
  options?: Options<RootData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    RootResponse,
    unknown,
    ThrowOnError
  >({
    url: "/",
    ...options,
  });
};
