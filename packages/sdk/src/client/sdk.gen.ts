// This file is auto-generated by @hey-api/openapi-ts

import type {
  Options as ClientOptions,
  TDataShape,
  Client,
} from "@hey-api/client-fetch";
import type {
  AuthSignupData,
  AuthSignupResponse,
  AuthSignupError,
  AuthSigninData,
  AuthSigninResponse,
  AuthSigninError,
  AuthRefreshTokenData,
  AuthRefreshTokenResponse,
  AuthSignoutData,
  AuthSignoutResponse,
  AuthGetCurrentUserData,
  AuthGetCurrentUserResponse,
  TgbotAccountsCreateData,
  TgbotAccountsCreateResponse,
  TgbotAccountsCreateError,
  TgbotAccountsSendCodeData,
  TgbotAccountsSendCodeResponse,
  TgbotAccountsSendCodeError,
  TgbotAccountsSigninData,
  TgbotAccountsSigninResponse,
  TgbotAccountsSigninError,
  RootData,
  RootResponse,
} from "./types.gen";
import { client as _heyApiClient } from "./client.gen";

export type Options<
  TData extends TDataShape = TDataShape,
  ThrowOnError extends boolean = boolean,
> = ClientOptions<TData, ThrowOnError> & {
  /**
   * You can provide a client instance returned by `createClient()` instead of
   * individual options. This might be also useful if you want to implement a
   * custom client.
   */
  client?: Client;
  /**
   * You can pass arbitrary values through the `meta` object. This can be
   * used to access values that aren't defined as part of the SDK function.
   */
  meta?: Record<string, unknown>;
};

/**
 * Signup
 */
export const authSignup = <ThrowOnError extends boolean = false>(
  options: Options<AuthSignupData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthSignupResponse,
    AuthSignupError,
    ThrowOnError
  >({
    url: "/auth/signup",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Signin
 */
export const authSignin = <ThrowOnError extends boolean = false>(
  options: Options<AuthSigninData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    AuthSigninResponse,
    AuthSigninError,
    ThrowOnError
  >({
    url: "/auth/signin",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Refresh Token
 */
export const authRefreshToken = <ThrowOnError extends boolean = false>(
  options?: Options<AuthRefreshTokenData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthRefreshTokenResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/refresh-token",
    ...options,
  });
};

/**
 * Signout
 */
export const authSignout = <ThrowOnError extends boolean = false>(
  options?: Options<AuthSignoutData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).post<
    AuthSignoutResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/signout",
    ...options,
  });
};

/**
 * Get Current User
 */
export const authGetCurrentUser = <ThrowOnError extends boolean = false>(
  options?: Options<AuthGetCurrentUserData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    AuthGetCurrentUserResponse,
    unknown,
    ThrowOnError
  >({
    security: [
      {
        scheme: "bearer",
        type: "http",
      },
    ],
    url: "/auth/me",
    ...options,
  });
};

/**
 * Create
 */
export const tgbotAccountsCreate = <ThrowOnError extends boolean = false>(
  options: Options<TgbotAccountsCreateData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TgbotAccountsCreateResponse,
    TgbotAccountsCreateError,
    ThrowOnError
  >({
    url: "/tgbot/accounts/",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Send Code
 */
export const tgbotAccountsSendCode = <ThrowOnError extends boolean = false>(
  options: Options<TgbotAccountsSendCodeData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TgbotAccountsSendCodeResponse,
    TgbotAccountsSendCodeError,
    ThrowOnError
  >({
    url: "/tgbot/accounts/send-code",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Signin
 */
export const tgbotAccountsSignin = <ThrowOnError extends boolean = false>(
  options: Options<TgbotAccountsSigninData, ThrowOnError>,
) => {
  return (options.client ?? _heyApiClient).post<
    TgbotAccountsSigninResponse,
    TgbotAccountsSigninError,
    ThrowOnError
  >({
    url: "/tgbot/accounts/signin",
    ...options,
    headers: {
      "Content-Type": "application/json",
      ...options?.headers,
    },
  });
};

/**
 * Root
 */
export const root = <ThrowOnError extends boolean = false>(
  options?: Options<RootData, ThrowOnError>,
) => {
  return (options?.client ?? _heyApiClient).get<
    RootResponse,
    unknown,
    ThrowOnError
  >({
    url: "/",
    ...options,
  });
};
