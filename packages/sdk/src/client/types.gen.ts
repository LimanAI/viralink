// This file is auto-generated by @hey-api/openapi-ts

export type AccessToken = {
  token: string;
  token_type?: string;
};

export type AddTgBotRequest = {
  bot_token: string;
};

export type BotMetadata = {
  id: number;
  username?: string | null;
  first_name?: string | null;
  description?: string | null;
};

export type ChannelMetadata = {
  id: number;
  username?: string;
  title?: string | null;
  description?: string | null;
};

export type ChannelProfile = {
  content_description?: string | null;
  persona_description?: string | null;
};

export type CodeRequest = {
  account_id: string;
  phone_number: string;
};

export type CreateAccountRequest = {
  phone_number: string;
  api_id: number;
  api_hash: string;
};

export type CreateTgAgentRequest = {
  channel_username: string;
};

export type HttpError = {
  detail: string;
  status_code: number;
};

export type HttpForbiddenError = {
  detail: string;
  status_code: number;
};

export type HttpNotFoundError = {
  detail: string;
  status_code: number;
};

export type HttpUnauthorizedError = {
  detail: string;
  status_code: number;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

export type LinkTgBotRequest = {
  bot_id: string;
};

export type SignUpRequest = {
  email: string;
  password: string;
  fullname: string | null;
};

export type TgAccount = {
  id: string;
  status: TgAccountStatus;
};

export type TgAccountStatus = "initial" | "sent_code" | "active" | "disabled";

export type TgAgent = {
  id: string;
  created_at: string;
  status: TgAgentStatus;
  status_changed_at?: string | null;
  channel_id?: number | null;
  channel_username?: string | null;
  channel_metadata?: ChannelMetadata | null;
  channel_profile?: ChannelProfile | null;
  user_bot?: TgUserBot | null;
};

export type TgAgentStatus =
  | "initial"
  | "waiting_bot_attach"
  | "waiting_bot_access"
  | "waiting_channel_profile"
  | "active"
  | "disabled"
  | "disabled_no_credit";

export type TgUserBot = {
  id: string;
  created_at: string;
  metadata_?: BotMetadata | null;
};

export type UpdateChannelProfileRequest = {
  content_description?: string | null;
  persona_description?: string | null;
};

export type User = {
  id: string;
  email: string;
  username: string;
  fullname: string;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type AppAuthSchemasSignInRequest = {
  email: string;
  password: string;
};

export type AppTgAccountsSchemasSignInRequest = {
  account_id: string;
  code: number;
  password?: string | null;
};

export type AuthSignupData = {
  body: SignUpRequest;
  path?: never;
  query?: never;
  url: "/auth/signup";
};

export type AuthSignupErrors = {
  /**
   * Conflict
   */
  409: HttpError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthSignupError = AuthSignupErrors[keyof AuthSignupErrors];

export type AuthSignupResponses = {
  /**
   * Successful Response
   */
  201: User;
};

export type AuthSignupResponse = AuthSignupResponses[keyof AuthSignupResponses];

export type AuthSigninData = {
  body: AppAuthSchemasSignInRequest;
  path?: never;
  query?: never;
  url: "/auth/signin";
};

export type AuthSigninErrors = {
  /**
   * Unauthorized
   */
  401: HttpUnauthorizedError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthSigninError = AuthSigninErrors[keyof AuthSigninErrors];

export type AuthSigninResponses = {
  /**
   * Successful Response
   */
  200: AccessToken;
};

export type AuthSigninResponse = AuthSigninResponses[keyof AuthSigninResponses];

export type AuthRefreshTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/refresh-token";
};

export type AuthRefreshTokenResponses = {
  /**
   * Successful Response
   */
  200: AccessToken;
};

export type AuthRefreshTokenResponse =
  AuthRefreshTokenResponses[keyof AuthRefreshTokenResponses];

export type AuthSignoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/signout";
};

export type AuthSignoutResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type AuthSignoutResponse =
  AuthSignoutResponses[keyof AuthSignoutResponses];

export type AuthGetCurrentUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/me";
};

export type AuthGetCurrentUserResponses = {
  /**
   * Successful Response
   */
  200: User;
};

export type AuthGetCurrentUserResponse =
  AuthGetCurrentUserResponses[keyof AuthGetCurrentUserResponses];

export type TgAccountsListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/tg/accounts/";
};

export type TgAccountsListResponses = {
  /**
   * Successful Response
   */
  200: Array<TgAccount>;
};

export type TgAccountsListResponse =
  TgAccountsListResponses[keyof TgAccountsListResponses];

export type TgAccountsCreateData = {
  body: CreateAccountRequest;
  path?: never;
  query?: never;
  url: "/tg/accounts/";
};

export type TgAccountsCreateErrors = {
  /**
   * Bad Request
   */
  400: HttpError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgAccountsCreateError =
  TgAccountsCreateErrors[keyof TgAccountsCreateErrors];

export type TgAccountsCreateResponses = {
  /**
   * Successful Response
   */
  201: TgAccount;
};

export type TgAccountsCreateResponse =
  TgAccountsCreateResponses[keyof TgAccountsCreateResponses];

export type TgAccountsSendCodeData = {
  body: CodeRequest;
  path?: never;
  query?: never;
  url: "/tg/accounts/send-code";
};

export type TgAccountsSendCodeErrors = {
  /**
   * Not Found
   */
  404: HttpError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgAccountsSendCodeError =
  TgAccountsSendCodeErrors[keyof TgAccountsSendCodeErrors];

export type TgAccountsSendCodeResponses = {
  /**
   * Successful Response
   */
  200: TgAccount;
};

export type TgAccountsSendCodeResponse =
  TgAccountsSendCodeResponses[keyof TgAccountsSendCodeResponses];

export type TgAccountsSigninData = {
  body: AppTgAccountsSchemasSignInRequest;
  path?: never;
  query?: never;
  url: "/tg/accounts/signin";
};

export type TgAccountsSigninErrors = {
  /**
   * Bad Request
   */
  400: HttpError;
  /**
   * Not Found
   */
  404: HttpError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgAccountsSigninError =
  TgAccountsSigninErrors[keyof TgAccountsSigninErrors];

export type TgAccountsSigninResponses = {
  /**
   * Successful Response
   */
  200: TgAccount;
};

export type TgAccountsSigninResponse =
  TgAccountsSigninResponses[keyof TgAccountsSigninResponses];

export type TgAccountsGetData = {
  body?: never;
  path: {
    account_id: string;
  };
  query?: never;
  url: "/tg/accounts/{account_id}";
};

export type TgAccountsGetErrors = {
  /**
   * Not Found
   */
  404: HttpError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgAccountsGetError = TgAccountsGetErrors[keyof TgAccountsGetErrors];

export type TgAccountsGetResponses = {
  /**
   * Successful Response
   */
  200: TgAccount;
};

export type TgAccountsGetResponse =
  TgAccountsGetResponses[keyof TgAccountsGetResponses];

export type TgAgentsListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/tg/agents/";
};

export type TgAgentsListErrors = {
  /**
   * Unauthorized
   */
  401: HttpUnauthorizedError;
};

export type TgAgentsListError = TgAgentsListErrors[keyof TgAgentsListErrors];

export type TgAgentsListResponses = {
  /**
   * Successful Response
   */
  200: Array<TgAgent>;
};

export type TgAgentsListResponse =
  TgAgentsListResponses[keyof TgAgentsListResponses];

export type TgAgentsCreateData = {
  body: CreateTgAgentRequest;
  path?: never;
  query?: never;
  url: "/tg/agents/";
};

export type TgAgentsCreateErrors = {
  /**
   * Unauthorized
   */
  401: HttpUnauthorizedError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgAgentsCreateError =
  TgAgentsCreateErrors[keyof TgAgentsCreateErrors];

export type TgAgentsCreateResponses = {
  /**
   * Successful Response
   */
  201: TgAgent;
};

export type TgAgentsCreateResponse =
  TgAgentsCreateResponses[keyof TgAgentsCreateResponses];

export type TgAgentsListBotsData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/tg/agents/bots";
};

export type TgAgentsListBotsErrors = {
  /**
   * Unauthorized
   */
  401: HttpUnauthorizedError;
};

export type TgAgentsListBotsError =
  TgAgentsListBotsErrors[keyof TgAgentsListBotsErrors];

export type TgAgentsListBotsResponses = {
  /**
   * Successful Response
   */
  200: Array<TgUserBot>;
};

export type TgAgentsListBotsResponse =
  TgAgentsListBotsResponses[keyof TgAgentsListBotsResponses];

export type TgAgentsDeleteData = {
  body?: never;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/tg/agents/{agent_id}";
};

export type TgAgentsDeleteErrors = {
  /**
   * Unauthorized
   */
  401: HttpUnauthorizedError;
  /**
   * Not Found
   */
  404: HttpNotFoundError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgAgentsDeleteError =
  TgAgentsDeleteErrors[keyof TgAgentsDeleteErrors];

export type TgAgentsDeleteResponses = {
  /**
   * Successful Response
   */
  200: TgAgent;
};

export type TgAgentsDeleteResponse =
  TgAgentsDeleteResponses[keyof TgAgentsDeleteResponses];

export type TgAgentsGetData = {
  body?: never;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/tg/agents/{agent_id}";
};

export type TgAgentsGetErrors = {
  /**
   * Unauthorized
   */
  401: HttpUnauthorizedError;
  /**
   * Forbidden
   */
  403: HttpForbiddenError;
  /**
   * Not Found
   */
  404: HttpNotFoundError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgAgentsGetError = TgAgentsGetErrors[keyof TgAgentsGetErrors];

export type TgAgentsGetResponses = {
  /**
   * Successful Response
   */
  200: TgAgent;
};

export type TgAgentsGetResponse =
  TgAgentsGetResponses[keyof TgAgentsGetResponses];

export type TgAgentsCheckBotPermissionsData = {
  body?: never;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/tg/agents/{agent_id}/check-bot-permissions";
};

export type TgAgentsCheckBotPermissionsErrors = {
  /**
   * Unauthorized
   */
  401: HttpUnauthorizedError;
  /**
   * Not Found
   */
  404: HttpNotFoundError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgAgentsCheckBotPermissionsError =
  TgAgentsCheckBotPermissionsErrors[keyof TgAgentsCheckBotPermissionsErrors];

export type TgAgentsCheckBotPermissionsResponses = {
  /**
   * Successful Response
   */
  200: TgAgent;
};

export type TgAgentsCheckBotPermissionsResponse =
  TgAgentsCheckBotPermissionsResponses[keyof TgAgentsCheckBotPermissionsResponses];

export type TgAgentsCreateBotData = {
  body: AddTgBotRequest;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/tg/agents/{agent_id}/bots";
};

export type TgAgentsCreateBotErrors = {
  /**
   * Unauthorized
   */
  401: HttpUnauthorizedError;
  /**
   * Forbidden
   */
  403: HttpForbiddenError;
  /**
   * Not Found
   */
  404: HttpNotFoundError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgAgentsCreateBotError =
  TgAgentsCreateBotErrors[keyof TgAgentsCreateBotErrors];

export type TgAgentsCreateBotResponses = {
  /**
   * Successful Response
   */
  201: TgAgent;
};

export type TgAgentsCreateBotResponse =
  TgAgentsCreateBotResponses[keyof TgAgentsCreateBotResponses];

export type TgAgentsLinkBotData = {
  body: LinkTgBotRequest;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/tg/agents/{agent_id}/bots/link";
};

export type TgAgentsLinkBotErrors = {
  /**
   * Unauthorized
   */
  401: HttpUnauthorizedError;
  /**
   * Not Found
   */
  404: HttpNotFoundError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgAgentsLinkBotError =
  TgAgentsLinkBotErrors[keyof TgAgentsLinkBotErrors];

export type TgAgentsLinkBotResponses = {
  /**
   * Successful Response
   */
  200: TgAgent;
};

export type TgAgentsLinkBotResponse =
  TgAgentsLinkBotResponses[keyof TgAgentsLinkBotResponses];

export type TgAgentsUpdateChannelProfileData = {
  body: UpdateChannelProfileRequest;
  path: {
    agent_id: string;
  };
  query?: never;
  url: "/tg/agents/{agent_id}/channel-profile";
};

export type TgAgentsUpdateChannelProfileErrors = {
  /**
   * Unauthorized
   */
  401: HttpUnauthorizedError;
  /**
   * Not Found
   */
  404: HttpNotFoundError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgAgentsUpdateChannelProfileError =
  TgAgentsUpdateChannelProfileErrors[keyof TgAgentsUpdateChannelProfileErrors];

export type TgAgentsUpdateChannelProfileResponses = {
  /**
   * Successful Response
   */
  200: TgAgent;
};

export type TgAgentsUpdateChannelProfileResponse =
  TgAgentsUpdateChannelProfileResponses[keyof TgAgentsUpdateChannelProfileResponses];

export type RootData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/";
};

export type RootResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: string;
  };
};

export type RootResponse = RootResponses[keyof RootResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
