// This file is auto-generated by @hey-api/openapi-ts

export type AccessToken = {
  token: string;
  token_type?: string;
};

export type CodeRequest = {
  account_id: string;
  phone_number: string;
};

export type CreateAccountRequest = {
  phone_number: string;
  api_id: number;
  api_hash: string;
};

export type HttpError = {
  detail: string;
  status_code: number;
};

export type HttpUnauthorizedError = {
  detail: string;
  status_code: number;
};

export type HttpValidationError = {
  detail?: Array<ValidationError>;
};

export type SignUpRequest = {
  email: string;
  password: string;
  fullname: string | null;
};

export type TgAccount = {
  id: string;
  status: TgAccountStatus;
};

export type TgAccountStatus = "initial" | "sent_code" | "active" | "disabled";

export type User = {
  id: string;
  email: string;
  username: string;
  fullname: string;
};

export type ValidationError = {
  loc: Array<string | number>;
  msg: string;
  type: string;
};

export type AppAuthSchemasSignInRequest = {
  email: string;
  password: string;
};

export type AppTgbotAccountsSchemasSignInRequest = {
  account_id: string;
  code: number;
  password?: string | null;
};

export type AuthSignupData = {
  body: SignUpRequest;
  path?: never;
  query?: never;
  url: "/auth/signup";
};

export type AuthSignupErrors = {
  /**
   * Conflict
   */
  409: HttpError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthSignupError = AuthSignupErrors[keyof AuthSignupErrors];

export type AuthSignupResponses = {
  /**
   * Successful Response
   */
  201: User;
};

export type AuthSignupResponse = AuthSignupResponses[keyof AuthSignupResponses];

export type AuthSigninData = {
  body: AppAuthSchemasSignInRequest;
  path?: never;
  query?: never;
  url: "/auth/signin";
};

export type AuthSigninErrors = {
  /**
   * Unauthorized
   */
  401: HttpUnauthorizedError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type AuthSigninError = AuthSigninErrors[keyof AuthSigninErrors];

export type AuthSigninResponses = {
  /**
   * Successful Response
   */
  200: AccessToken;
};

export type AuthSigninResponse = AuthSigninResponses[keyof AuthSigninResponses];

export type AuthRefreshTokenData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/refresh-token";
};

export type AuthRefreshTokenResponses = {
  /**
   * Successful Response
   */
  200: AccessToken;
};

export type AuthRefreshTokenResponse =
  AuthRefreshTokenResponses[keyof AuthRefreshTokenResponses];

export type AuthSignoutData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/signout";
};

export type AuthSignoutResponses = {
  /**
   * Successful Response
   */
  204: void;
};

export type AuthSignoutResponse =
  AuthSignoutResponses[keyof AuthSignoutResponses];

export type AuthGetCurrentUserData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/auth/me";
};

export type AuthGetCurrentUserResponses = {
  /**
   * Successful Response
   */
  200: User;
};

export type AuthGetCurrentUserResponse =
  AuthGetCurrentUserResponses[keyof AuthGetCurrentUserResponses];

export type TgbotAccountsListData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/tgbot/accounts/";
};

export type TgbotAccountsListResponses = {
  /**
   * Successful Response
   */
  200: Array<TgAccount>;
};

export type TgbotAccountsListResponse =
  TgbotAccountsListResponses[keyof TgbotAccountsListResponses];

export type TgbotAccountsCreateData = {
  body: CreateAccountRequest;
  path?: never;
  query?: never;
  url: "/tgbot/accounts/";
};

export type TgbotAccountsCreateErrors = {
  /**
   * Bad Request
   */
  400: HttpError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgbotAccountsCreateError =
  TgbotAccountsCreateErrors[keyof TgbotAccountsCreateErrors];

export type TgbotAccountsCreateResponses = {
  /**
   * Successful Response
   */
  201: TgAccount;
};

export type TgbotAccountsCreateResponse =
  TgbotAccountsCreateResponses[keyof TgbotAccountsCreateResponses];

export type TgbotAccountsSendCodeData = {
  body: CodeRequest;
  path?: never;
  query?: never;
  url: "/tgbot/accounts/send-code";
};

export type TgbotAccountsSendCodeErrors = {
  /**
   * Not Found
   */
  404: HttpError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgbotAccountsSendCodeError =
  TgbotAccountsSendCodeErrors[keyof TgbotAccountsSendCodeErrors];

export type TgbotAccountsSendCodeResponses = {
  /**
   * Successful Response
   */
  200: TgAccount;
};

export type TgbotAccountsSendCodeResponse =
  TgbotAccountsSendCodeResponses[keyof TgbotAccountsSendCodeResponses];

export type TgbotAccountsSigninData = {
  body: AppTgbotAccountsSchemasSignInRequest;
  path?: never;
  query?: never;
  url: "/tgbot/accounts/signin";
};

export type TgbotAccountsSigninErrors = {
  /**
   * Bad Request
   */
  400: HttpError;
  /**
   * Not Found
   */
  404: HttpError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgbotAccountsSigninError =
  TgbotAccountsSigninErrors[keyof TgbotAccountsSigninErrors];

export type TgbotAccountsSigninResponses = {
  /**
   * Successful Response
   */
  200: TgAccount;
};

export type TgbotAccountsSigninResponse =
  TgbotAccountsSigninResponses[keyof TgbotAccountsSigninResponses];

export type TgbotAccountsGetData = {
  body?: never;
  path: {
    account_id: string;
  };
  query?: never;
  url: "/tgbot/accounts/{account_id}";
};

export type TgbotAccountsGetErrors = {
  /**
   * Not Found
   */
  404: HttpError;
  /**
   * Validation Error
   */
  422: HttpValidationError;
};

export type TgbotAccountsGetError =
  TgbotAccountsGetErrors[keyof TgbotAccountsGetErrors];

export type TgbotAccountsGetResponses = {
  /**
   * Successful Response
   */
  200: TgAccount;
};

export type TgbotAccountsGetResponse =
  TgbotAccountsGetResponses[keyof TgbotAccountsGetResponses];

export type RootData = {
  body?: never;
  path?: never;
  query?: never;
  url: "/";
};

export type RootResponses = {
  /**
   * Successful Response
   */
  200: {
    [key: string]: string;
  };
};

export type RootResponse = RootResponses[keyof RootResponses];

export type ClientOptions = {
  baseUrl: `${string}://${string}` | (string & {});
};
